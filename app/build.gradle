import java.util.function.Predicate

/*
   Copyright Â© 2023 - 2024  Kynetics, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

android {
    namespace 'com.kynetics.android_i2c_example_app'
    compileSdk 33

    defaultConfig {
        applicationId "com.kynetics.android_i2c_example_app"
        minSdk 24
        //noinspection OldTargetApi
        targetSdk 33
        versionCode 2
        versionName "1.1"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    def KyneticsKeystorePass = System.getenv("KYNETICS_KEYSTORE_PASS")
    def KyneticsKeyAlias = System.getenv("KYNETICS_KEY_ALIAS")
    def KyneticsKeyPass = System.getenv("KYNETICS_KEY_PASS")

    def envs= [KyneticsKeystorePass, KyneticsKeyAlias, KyneticsKeyPass]
    def signWithKyneticsKey = envs.stream().allMatch(new Predicate<String>() {
        @Override
        boolean test(String s) {
            return s != null && !s.isEmpty()
        }
    })

    signingConfigs{
        if (signWithKyneticsKey) {
            kynetics {
                storePassword KyneticsKeystorePass
                keyAlias KyneticsKeyAlias
                keyPassword KyneticsKeyPass
                storeFile file('../keystore/kynetics.jks')
                v2SigningEnabled true
                v1SigningEnabled true
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules.pro'
        }

        if (signWithKyneticsKey) {
            kynetics_key {
                signingConfig signingConfigs.kynetics
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                matchingFallbacks = ['release', 'debug']
            }
        }
    }
    packagingOptions {
        resources.excludes.add("META-INF/*")
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    //This is necessary for loading the android native binaries
    implementation("net.java.dev.jna:jna:5.13.0@aar")

    implementation 'androidx.core:core-ktx:1.10.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
}